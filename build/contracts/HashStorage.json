{
  "contractName": "HashStorage",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "StoreHash",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "store",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"StoreHash\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Store 256-bit hash values as event log\",\"events\":{\"StoreHash(bytes32)\":{\"details\":\"Stores all hashes in an append-only event log. Using events reduces gas cost dramatically.\"}},\"kind\":\"dev\",\"methods\":{\"store(bytes32)\":{\"details\":\"Stores the given hash as latest hash value.\",\"params\":{\"hash\":\"value to store\"}}},\"title\":\"Hash Storage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/HashStorage.sol\":\"HashStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/HashStorage.sol\":{\"keccak256\":\"0x7ffbb14a87f487b1e539b3fdecc5d6823616086ee617aad1de5991227794cb37\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://2ad3a6f076d43da1f0a050c0e013b180a20b708f40551f98366e35c969117fdc\",\"dweb:/ipfs/Qmf1ozmkmwCmcXBUnJQzCvsUrgNhbq2P6Ydut1z6m4cJSq\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060c28061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063654cf88c14602d575b600080fd5b603c60383660046074565b603e565b005b6040518181527f5e92bd76a4d134c8db2c688f347f17767ef4de921d24e417a08ae3bf91dbf8299060200160405180910390a150565b600060208284031215608557600080fd5b503591905056fea26469706673582212202d3213d0f2c32e25efae26a578167f2402b417b9c424af3016a43e784109131864736f6c63430008110033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063654cf88c14602d575b600080fd5b603c60383660046074565b603e565b005b6040518181527f5e92bd76a4d134c8db2c688f347f17767ef4de921d24e417a08ae3bf91dbf8299060200160405180910390a150565b600060208284031215608557600080fd5b503591905056fea26469706673582212202d3213d0f2c32e25efae26a578167f2402b417b9c424af3016a43e784109131864736f6c63430008110033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:378:1",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:1",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "84:110:1",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "130:16:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "139:1:1",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "142:1:1",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "132:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "132:12:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "132:12:1"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "105:7:1"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "114:9:1"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "101:3:1"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "101:23:1"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "126:2:1",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "97:3:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "97:32:1"
                  },
                  "nodeType": "YulIf",
                  "src": "94:52:1"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "155:33:1",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "178:9:1"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "165:12:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "165:23:1"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "155:6:1"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bytes32",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "50:9:1",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "61:7:1",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "73:6:1",
                "type": ""
              }
            ],
            "src": "14:180:1"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "300:76:1",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "310:26:1",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "322:9:1"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "333:2:1",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "318:3:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "318:18:1"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "310:4:1"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "352:9:1"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "363:6:1"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "345:6:1"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "345:25:1"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "345:25:1"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "269:9:1",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "280:6:1",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "291:4:1",
                "type": ""
              }
            ],
            "src": "199:177:1"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
      "id": 1,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "156:378:0:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "156:378:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;456:75;;;;;;:::i;:::-;;:::i;:::-;;;508:15;;345:25:1;;;508:15:0;;333:2:1;318:18;508:15:0;;;;;;;456:75;:::o;14:180:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o",
  "source": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Hash Storage\r\n * @dev Store 256-bit hash values as event log\r\n */\r\ncontract HashStorage {\r\n\r\n    /**\r\n     * @dev Stores all hashes in an append-only event log. Using events reduces gas cost dramatically.\r\n     */\r\n    event StoreHash(bytes32 hash);\r\n\r\n    /**\r\n     * @dev Stores the given hash as latest hash value.\r\n     * @param hash value to store\r\n     */\r\n    function store(bytes32 hash) public {\r\n        emit StoreHash(hash);\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\Users\\danie\\Desktop\\ttsm-prototype\\contracts\\HashStorage.sol",
  "ast": {
    "absolutePath": "project:/contracts/HashStorage.sol",
    "exportedSymbols": {
      "HashStorage": [
        19
      ]
    },
    "id": 20,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "39:31:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "HashStorage",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 2,
          "nodeType": "StructuredDocumentation",
          "src": "74:80:0",
          "text": " @title Hash Storage\n @dev Store 256-bit hash values as event log"
        },
        "fullyImplemented": true,
        "id": 19,
        "linearizedBaseContracts": [
          19
        ],
        "name": "HashStorage",
        "nameLocation": "165:11:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 3,
              "nodeType": "StructuredDocumentation",
              "src": "186:116:0",
              "text": " @dev Stores all hashes in an append-only event log. Using events reduces gas cost dramatically."
            },
            "eventSelector": "5e92bd76a4d134c8db2c688f347f17767ef4de921d24e417a08ae3bf91dbf829",
            "id": 7,
            "name": "StoreHash",
            "nameLocation": "314:9:0",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 6,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "332:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 7,
                  "src": "324:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 4,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "324:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "323:14:0"
            },
            "src": "308:30:0"
          },
          {
            "body": {
              "id": 17,
              "nodeType": "Block",
              "src": "492:39:0",
              "statements": [
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 14,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10,
                        "src": "518:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 13,
                      "name": "StoreHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7,
                      "src": "508:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$returns$__$",
                        "typeString": "function (bytes32)"
                      }
                    },
                    "id": 15,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "508:15:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 16,
                  "nodeType": "EmitStatement",
                  "src": "503:20:0"
                }
              ]
            },
            "documentation": {
              "id": 8,
              "nodeType": "StructuredDocumentation",
              "src": "346:104:0",
              "text": " @dev Stores the given hash as latest hash value.\n @param hash value to store"
            },
            "functionSelector": "654cf88c",
            "id": 18,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "store",
            "nameLocation": "465:5:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 11,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "479:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 18,
                  "src": "471:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "471:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "470:14:0"
            },
            "returnParameters": {
              "id": 12,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "492:0:0"
            },
            "scope": 19,
            "src": "456:75:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 20,
        "src": "156:378:0",
        "usedErrors": []
      }
    ],
    "src": "39:497:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.17+commit.8df45f5f.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0x34552A71d0d1e9015331Baacf05f3B06Aba31Ad4",
      "transactionHash": "0x83ec5ab9f89e63b3a7cb0e7744f9eaf8526ebc215248ed9906f0a31aa2eda2ab"
    }
  },
  "schemaVersion": "3.4.10",
  "updatedAt": "2022-10-07T18:09:38.062Z",
  "networkType": "ethereum",
  "devdoc": {
    "details": "Store 256-bit hash values as event log",
    "events": {
      "StoreHash(bytes32)": {
        "details": "Stores all hashes in an append-only event log. Using events reduces gas cost dramatically."
      }
    },
    "kind": "dev",
    "methods": {
      "store(bytes32)": {
        "details": "Stores the given hash as latest hash value.",
        "params": {
          "hash": "value to store"
        }
      }
    },
    "title": "Hash Storage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}